
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000001de  00000252  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000262  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c91  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ea  00000000  00000000  00000fe5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000482  00000000  00000000  000017cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d8  00000000  00000000  00001c54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004c0  00000000  00000000  00001d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000464  00000000  00000000  000021ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002650  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ed       	ldi	r30, 0xDE	; 222
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <main>
  8e:	0c 94 ed 00 	jmp	0x1da	; 0x1da <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <_Z9Write2Nibh>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	25 b1       	in	r18, 0x05	; 5
  98:	2f 70       	andi	r18, 0x0F	; 15
  9a:	98 2f       	mov	r25, r24
  9c:	90 7f       	andi	r25, 0xF0	; 240
  9e:	92 2b       	or	r25, r18
  a0:	95 b9       	out	0x05, r25	; 5
  a2:	2a 9a       	sbi	0x05, 2	; 5
  a4:	2a 98       	cbi	0x05, 2	; 5
  a6:	30 e1       	ldi	r19, 0x10	; 16
  a8:	83 9f       	mul	r24, r19
  aa:	c0 01       	movw	r24, r0
  ac:	11 24       	eor	r1, r1
  ae:	82 2b       	or	r24, r18
  b0:	85 b9       	out	0x05, r24	; 5
  b2:	2a 9a       	sbi	0x05, 2	; 5
  b4:	2a 98       	cbi	0x05, 2	; 5
  b6:	08 95       	ret

000000b8 <_Z8init_LCDv>:
	
}

void init_LCD()
{
	DDR_CTRL=0xFF;
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	84 b9       	out	0x04, r24	; 4
	DDR_DATA=0xFF;
  bc:	84 b9       	out	0x04, r24	; 4
	
	//Function set------------------------------------------------------------------------------
	cbi(CTRL,RS);   // the following data is COMMAND
  be:	28 98       	cbi	0x05, 0	; 5
	cbi(CTRL, RW); // AVR->LCD
  c0:	29 98       	cbi	0x05, 1	; 5
	cbi(CTRL, EN);
  c2:	2a 98       	cbi	0x05, 2	; 5
	
	sbi(CTRL,EN); //enable
  c4:	2a 9a       	sbi	0x05, 2	; 5
	sbi(DATA_O, 5);
  c6:	2d 9a       	sbi	0x05, 5	; 5
	cbi(CTRL,EN); //disable
  c8:	2a 98       	cbi	0x05, 2	; 5
  ca:	2f ef       	ldi	r18, 0xFF	; 255
  cc:	80 e7       	ldi	r24, 0x70	; 112
  ce:	92 e0       	ldi	r25, 0x02	; 2
  d0:	21 50       	subi	r18, 0x01	; 1
  d2:	80 40       	sbci	r24, 0x00	; 0
  d4:	90 40       	sbci	r25, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <_Z8init_LCDv+0x18>
  d8:	00 c0       	rjmp	.+0      	; 0xda <_Z8init_LCDv+0x22>
  da:	00 00       	nop
	wait_LCD();
	Write2Nib(0x28);//4 bit mode 2line, 5x8 font
  dc:	88 e2       	ldi	r24, 0x28	; 40
  de:	0e 94 4b 00 	call	0x96	; 0x96 <_Z9Write2Nibh>
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	80 e7       	ldi	r24, 0x70	; 112
  e6:	92 e0       	ldi	r25, 0x02	; 2
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <_Z8init_LCDv+0x30>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <_Z8init_LCDv+0x3a>
  f2:	00 00       	nop
	wait_LCD();
	
	//Display control-------------------------------------------------------------------------
	cbi(CTRL,RS); // the following data is COMMAND
  f4:	28 98       	cbi	0x05, 0	; 5
	Write2Nib(0x0E); //not Cursor display, 0x0E: with cursor
  f6:	8e e0       	ldi	r24, 0x0E	; 14
  f8:	0e 94 4b 00 	call	0x96	; 0x96 <_Z9Write2Nibh>
  fc:	2f ef       	ldi	r18, 0xFF	; 255
  fe:	80 e7       	ldi	r24, 0x70	; 112
 100:	92 e0       	ldi	r25, 0x02	; 2
 102:	21 50       	subi	r18, 0x01	; 1
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <_Z8init_LCDv+0x4a>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <_Z8init_LCDv+0x54>
 10c:	00 00       	nop
	wait_LCD();

	//Entry mode set------------------------------------------------------------------------
	cbi(CTRL,RS); // the following data is COMMAND
 10e:	28 98       	cbi	0x05, 0	; 5
	Write2Nib(0x06);
 110:	86 e0       	ldi	r24, 0x06	; 6
 112:	0e 94 4b 00 	call	0x96	; 0x96 <_Z9Write2Nibh>
 116:	2f ef       	ldi	r18, 0xFF	; 255
 118:	80 e7       	ldi	r24, 0x70	; 112
 11a:	92 e0       	ldi	r25, 0x02	; 2
 11c:	21 50       	subi	r18, 0x01	; 1
 11e:	80 40       	sbci	r24, 0x00	; 0
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <_Z8init_LCDv+0x64>
 124:	00 c0       	rjmp	.+0      	; 0x126 <_Z8init_LCDv+0x6e>
 126:	00 00       	nop
 128:	08 95       	ret

0000012a <_Z7clr_LCDv>:

}

void clr_LCD() // xoa LCD
{
	cbi(CTRL,RS); //RS=0 mean the following data is COMMAND (not normal DATA)
 12a:	28 98       	cbi	0x05, 0	; 5
	Write2Nib(0x01);
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	0e 94 4b 00 	call	0x96	; 0x96 <_Z9Write2Nibh>
 132:	2f ef       	ldi	r18, 0xFF	; 255
 134:	80 e7       	ldi	r24, 0x70	; 112
 136:	92 e0       	ldi	r25, 0x02	; 2
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	80 40       	sbci	r24, 0x00	; 0
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <_Z7clr_LCDv+0xe>
 140:	00 c0       	rjmp	.+0      	; 0x142 <_Z7clr_LCDv+0x18>
 142:	00 00       	nop
 144:	08 95       	ret

00000146 <_Z8move_LCDhh>:

void move_LCD(uint8_t y,uint8_t x)
{
	uint8_t Ad;
	Ad=64*(y-1)+(x-1)+0x80; // tinh ma lenh
	cbi(CTRL,RS); // the following data is COMMAND
 146:	28 98       	cbi	0x05, 0	; 5
	Write2Nib(Ad);
 148:	20 e4       	ldi	r18, 0x40	; 64
 14a:	82 9f       	mul	r24, r18
 14c:	60 0d       	add	r22, r0
 14e:	11 24       	eor	r1, r1
 150:	86 2f       	mov	r24, r22
 152:	81 5c       	subi	r24, 0xC1	; 193
 154:	0e 94 4b 00 	call	0x96	; 0x96 <_Z9Write2Nibh>
 158:	8f ef       	ldi	r24, 0xFF	; 255
 15a:	90 e7       	ldi	r25, 0x70	; 112
 15c:	22 e0       	ldi	r18, 0x02	; 2
 15e:	81 50       	subi	r24, 0x01	; 1
 160:	90 40       	sbci	r25, 0x00	; 0
 162:	20 40       	sbci	r18, 0x00	; 0
 164:	e1 f7       	brne	.-8      	; 0x15e <_Z8move_LCDhh+0x18>
 166:	00 c0       	rjmp	.+0      	; 0x168 <_Z8move_LCDhh+0x22>
 168:	00 00       	nop
 16a:	08 95       	ret

0000016c <_Z11putChar_LCDh>:

}

void putChar_LCD(uint8_t chr)  // output character 1 by 1
{
	sbi(CTRL,RS); //this is a normal DATA
 16c:	28 9a       	sbi	0x05, 0	; 5
	Write2Nib(chr);
 16e:	0e 94 4b 00 	call	0x96	; 0x96 <_Z9Write2Nibh>
 172:	2f ef       	ldi	r18, 0xFF	; 255
 174:	80 e7       	ldi	r24, 0x70	; 112
 176:	92 e0       	ldi	r25, 0x02	; 2
 178:	21 50       	subi	r18, 0x01	; 1
 17a:	80 40       	sbci	r24, 0x00	; 0
 17c:	90 40       	sbci	r25, 0x00	; 0
 17e:	e1 f7       	brne	.-8      	; 0x178 <_Z11putChar_LCDh+0xc>
 180:	00 c0       	rjmp	.+0      	; 0x182 <_Z11putChar_LCDh+0x16>
 182:	00 00       	nop
 184:	08 95       	ret

00000186 <_Z9print_LCDPc>:
	wait_LCD();
}

void print_LCD(char* str)   // output a string
{
 186:	0f 93       	push	r16
 188:	1f 93       	push	r17
 18a:	cf 93       	push	r28
 18c:	fc 01       	movw	r30, r24
	unsigned char i;
	for (i=0; str[i]!=0; i++)
 18e:	80 81       	ld	r24, Z
 190:	88 23       	and	r24, r24
 192:	59 f0       	breq	.+22     	; 0x1aa <_Z9print_LCDPc+0x24>
 194:	8f 01       	movw	r16, r30
 196:	c0 e0       	ldi	r28, 0x00	; 0
	{ putChar_LCD(str[i]);}
 198:	0e 94 b6 00 	call	0x16c	; 0x16c <_Z11putChar_LCDh>
}

void print_LCD(char* str)   // output a string
{
	unsigned char i;
	for (i=0; str[i]!=0; i++)
 19c:	cf 5f       	subi	r28, 0xFF	; 255
 19e:	f8 01       	movw	r30, r16
 1a0:	ec 0f       	add	r30, r28
 1a2:	f1 1d       	adc	r31, r1
 1a4:	80 81       	ld	r24, Z
 1a6:	81 11       	cpse	r24, r1
 1a8:	f7 cf       	rjmp	.-18     	; 0x198 <_Z9print_LCDPc+0x12>
	{ putChar_LCD(str[i]);}
}
 1aa:	cf 91       	pop	r28
 1ac:	1f 91       	pop	r17
 1ae:	0f 91       	pop	r16
 1b0:	08 95       	ret

000001b2 <main>:

int main(void)
{
    /* Replace with your application code */
	
	init_LCD(); // khoi dong LCD
 1b2:	0e 94 5c 00 	call	0xb8	; 0xb8 <_Z8init_LCDv>
	clr_LCD(); // xoa noi dung LCD
 1b6:	0e 94 95 00 	call	0x12a	; 0x12a <_Z7clr_LCDv>
	
	move_LCD(1,7);	// di chuyen den dong 1 bat dau tu ki tu thu 7
 1ba:	67 e0       	ldi	r22, 0x07	; 7
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	0e 94 a3 00 	call	0x146	; 0x146 <_Z8move_LCDhh>
	putChar_LCD('X'); // Xuat ky tu X
 1c2:	88 e5       	ldi	r24, 0x58	; 88
 1c4:	0e 94 b6 00 	call	0x16c	; 0x16c <_Z11putChar_LCDh>
	move_LCD(2,1);	// di chuyen den dong 2 bat dau tu ki tu thu 1
 1c8:	61 e0       	ldi	r22, 0x01	; 1
 1ca:	82 e0       	ldi	r24, 0x02	; 2
 1cc:	0e 94 a3 00 	call	0x146	; 0x146 <_Z8move_LCDhh>
	print_LCD("Input_a_string!"); // Xuat ra mot chuoi  (string length <= 15)
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	0e 94 c3 00 	call	0x186	; 0x186 <_Z9print_LCDPc>
 1d8:	ff cf       	rjmp	.-2      	; 0x1d8 <main+0x26>

000001da <_exit>:
 1da:	f8 94       	cli

000001dc <__stop_program>:
 1dc:	ff cf       	rjmp	.-2      	; 0x1dc <__stop_program>
